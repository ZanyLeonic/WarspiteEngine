<#@ template language="C#" hostspecific="True" #>
<#@ output extension=".h" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#
        static string GetHeadSha1(DirectoryInfo gitDirectory)
        {
            if (gitDirectory != null)
            {
                var head = File.ReadAllText(gitDirectory.GetFiles("HEAD").First().FullName);
                head = head.Substring(4).Trim();
                var headRef = System.IO.Path.Combine(gitDirectory.FullName, head);
                return File.ReadAllText(headRef).Trim();
            }
            return null;
        }

        static DirectoryInfo SearchForGitDirectory(string path)
        {
            DirectoryInfo di = new DirectoryInfo(path);
            var directories = di.GetDirectories(".git");
            var gitDirectory = directories.FirstOrDefault(x => x.Name == ".git");
            if (gitDirectory == null)
            {
                if (di.Parent != null)
                {
                    return SearchForGitDirectory(di.Parent.FullName);
                }

                return null;
            }
            return gitDirectory;
        }

        string GetSha1()
        {
            string searchDirectory = this.Host.TemplateFile.Replace(Path.GetFileName(this.Host.TemplateFile), "");
            searchDirectory = Directory.GetParent(searchDirectory).FullName;

            DirectoryInfo gitDirectory = SearchForGitDirectory(searchDirectory);
            string headSha1 = GetHeadSha1(gitDirectory);
            return headSha1;
        }

        int incrementBuildNum()
        {
            string searchDirectory = this.Host.TemplateFile.Replace(Path.GetFileName(this.Host.TemplateFile), "");
            var file = System.IO.Path.Combine(searchDirectory, "build.txt");
            int buildNum = -1;

           try
		   {
				System.IO.StreamReader reader = new System.IO.StreamReader(file);
				buildNum = int.Parse(reader.ReadLine());
				reader.Close();
				System.IO.File.WriteAllText(file, (buildNum+1).ToString());

				return buildNum +1;
           }
           catch(Exception)
           {
				System.IO.File.WriteAllText(file, (buildNum+1).ToString());
		   }
           // We got nothing.
           return buildNum+1;
        }

        static Int32 GetTime()
        {
            return (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
        }
#>
#pragma once

// GENERATED CODE --- CHANGED ON BUILD --- ANY MANUAL CHANGES WILL BE OVERWRITTEN.
#define GAME_BUILD_NUMBER <#= incrementBuildNum() #>
#define GAME_GIT_HASH "<#= GetSha1() #>"
#define GAME_BUILD_TIME <#= GetTime() #>